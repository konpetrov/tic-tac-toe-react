{"version":3,"sources":["components/Header.js","components/Mark.js","components/Square.js","components/Board.js","components/RestartButton.js","App.js","index.js"],"names":["Header","className","Mark","mark","invisible","gameOver","winning","classes","join","Square","index","checked","turn","update","isWinning","winningIndices","includes","disabled","onClick","Board","squares","map","squareProps","RestartButton","visible","gameStarted","restart","visibilityClass","style","visibility","App","winningCombinations","emptySquares","Array","fill","useState","setSquares","setTurn","setGameStarted","setGameOver","setWinningIndices","useEffect","isWin","isDraw","turnMarkIndices","forEach","square","push","combination","every","i","s","newSquares","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b4966db.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => <h1 className=\"header\">Tic-Tac-Toe</h1>;\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Mark = ({ mark, invisible, gameOver, winning }) => {\r\n    const classes = [\r\n        'mark',\r\n        mark,\r\n        invisible ? 'invisible' : '',\r\n        (gameOver && !winning) ? 'dimmed' : ''\r\n    ]\r\n\r\n    return <div className={classes.join(' ')}></div>;\r\n};\r\n\r\nexport default Mark;","import React from 'react';\r\nimport Mark from './Mark';\r\n\r\nconst Square = ({ index, checked, mark, turn, update, gameOver, winningIndices }) => {\r\n\r\n    const handleClick = () => update(index);\r\n    const isWinning = winningIndices.includes(index);\r\n\r\n    return (\r\n        <button\r\n            className=\"square\"\r\n            disabled={gameOver || checked}\r\n            onClick={handleClick}\r\n        >\r\n            {checked\r\n                ? <Mark\r\n                    mark={mark}\r\n                    invisible={false}\r\n                    gameOver={gameOver}\r\n                    winning={isWinning}\r\n                    />\r\n                : !gameOver && <Mark mark={turn} invisible />\r\n            }\r\n        </button>\r\n    )\r\n};\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './Square';\r\n\r\nconst Board = ({ squares, turn, update, gameOver, winningIndices }) => {\r\n    return (\r\n        <div className=\"board\">\r\n            {squares.map((squareProps, index) => (\r\n                <Square\r\n                    key={index}\r\n                    index={index}\r\n                    turn={turn}\r\n                    update={update}\r\n                    gameOver={gameOver}\r\n                    winningIndices={winningIndices}\r\n                    {...squareProps}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nconst RestartButton = ({ visible, gameStarted, restart }) => {\r\n\r\n    const visibilityClass = visible ? 'visible' : 'hidden';\r\n    const handleClick = () => restart();\r\n\r\n    return (\r\n        <div\r\n            className=\"restart-container\"\r\n            style={{visibility: gameStarted ? 'visible' : 'hidden'}}\r\n        >\r\n            <button\r\n                className={`restart-button ${visibilityClass}`}\r\n                onClick={handleClick}\r\n            >Restart?</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RestartButton;","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Board from './components/Board';\nimport RestartButton from './components/RestartButton';\nimport './style.css';\n\nconst App = () => {\n\n  const winningCombinations = [\n    // horizontal\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n\n    // vertical\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n\n    // diagonal\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  // initialize squares\n  const emptySquares = () => Array(9).fill({checked: false, mark: null});\n\n  // square properties\n  const [ squares, setSquares ] = useState(emptySquares());\n\n  // mark to be put on next move\n  const [ turn, setTurn ] = useState(null);\n\n  // current game state\n  const [ gameStarted, setGameStarted ] = useState(false);\n  const [ gameOver, setGameOver ] = useState(false);\n\n  // indcies of the winning combination\n  const [ winningIndices, setWinningIndices ] = useState([]);\n\n  // change the mark for the next turn\n  const changeTurn = () => turn === 'x' ? setTurn('o') : setTurn('x');\n\n  // check for game over and change turn on every move\n  useEffect(() => {\n    // check for game over\n    if ( isWin() || isDraw() ) setGameOver(true);\n\n    // initialize or change turn\n    changeTurn();\n  }, [squares]);\n\n\n  // update properties of a marked square\n  const updateSquares = index => {\n    const newSquares = [...squares];\n    newSquares[index] = {checked: true, mark: turn};\n    setSquares(newSquares);\n\n    // toggle game start\n    if (!gameStarted) setGameStarted(true);\n  }\n\n  // check if victory\n  const isWin = () => {\n    const turnMarkIndices = [];\n\n    // find all indices of a current mark\n    squares.forEach((square, index) => {\n      if (turn && square.mark === turn) turnMarkIndices.push(index);\n    });\n\n    // check if indices are winning\n    for (const combination of winningCombinations) {\n      if (combination.every(i => turnMarkIndices.includes(i))) {\n        setWinningIndices(combination);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // check if draw\n  const isDraw = () => squares.every(s => s.checked);\n\n  // restart game\n  const restart = () => {\n    setTurn(null);\n    setGameOver(false);\n    setWinningIndices([]);\n    setSquares(emptySquares());\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <Board\n        squares={squares}\n        turn={turn}\n        update={updateSquares}\n        gameOver={gameOver}\n        winningIndices={winningIndices}\n      />\n      <RestartButton\n        visible={gameOver}\n        gameStarted={gameStarted}\n        restart={restart}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}